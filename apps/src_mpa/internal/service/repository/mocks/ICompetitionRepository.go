// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	entities "src/internal/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ICompetitionRepository is an autogenerated mock type for the ICompetitionRepository type
type ICompetitionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: competition
func (_m *ICompetitionRepository) Create(competition *entities.Competition) error {
	ret := _m.Called(competition)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Competition) error); ok {
		r0 = rf(competition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRegistration provides a mock function with given fields: smID, compID
func (_m *ICompetitionRepository) DeleteRegistration(smID uuid.UUID, compID uuid.UUID) error {
	ret := _m.Called(smID, compID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRegistration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(smID, compID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCompetitionByID provides a mock function with given fields: competitionID
func (_m *ICompetitionRepository) GetCompetitionByID(competitionID uuid.UUID) (*entities.Competition, error) {
	ret := _m.Called(competitionID)

	if len(ret) == 0 {
		panic("no return value specified for GetCompetitionByID")
	}

	var r0 *entities.Competition
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*entities.Competition, error)); ok {
		return rf(competitionID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entities.Competition); ok {
		r0 = rf(competitionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Competition)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(competitionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpcoming provides a mock function with given fields: smID
func (_m *ICompetitionRepository) GetUpcoming(smID uuid.UUID) ([]*entities.Competition, error) {
	ret := _m.Called(smID)

	if len(ret) == 0 {
		panic("no return value specified for GetUpcoming")
	}

	var r0 []*entities.Competition
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]*entities.Competition, error)); ok {
		return rf(smID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*entities.Competition); ok {
		r0 = rf(smID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Competition)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(smID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCompetitions provides a mock function with given fields:
func (_m *ICompetitionRepository) ListCompetitions() ([]*entities.Competition, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListCompetitions")
	}

	var r0 []*entities.Competition
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Competition, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Competition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Competition)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUpcoming provides a mock function with given fields:
func (_m *ICompetitionRepository) ListUpcoming() ([]*entities.Competition, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListUpcoming")
	}

	var r0 []*entities.Competition
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Competition, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Competition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Competition)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSportsman provides a mock function with given fields: compApplication
func (_m *ICompetitionRepository) RegisterSportsman(compApplication *entities.CompApplication) error {
	ret := _m.Called(compApplication)

	if len(ret) == 0 {
		panic("no return value specified for RegisterSportsman")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.CompApplication) error); ok {
		r0 = rf(compApplication)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: competition
func (_m *ICompetitionRepository) Update(competition *entities.Competition) error {
	ret := _m.Called(competition)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Competition) error); ok {
		r0 = rf(competition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICompetitionRepository creates a new instance of ICompetitionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICompetitionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICompetitionRepository {
	mock := &ICompetitionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
