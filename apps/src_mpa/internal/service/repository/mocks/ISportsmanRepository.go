// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	entities "src/internal/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ISportsmanRepository is an autogenerated mock type for the ISportsmanRepository type
type ISportsmanRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: sportsman
func (_m *ISportsmanRepository) Create(sportsman *entities.Sportsman) error {
	ret := _m.Called(sportsman)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Sportsman) error); ok {
		r0 = rf(sportsman)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSportsmanByID provides a mock function with given fields: sportsmanID
func (_m *ISportsmanRepository) GetSportsmanByID(sportsmanID uuid.UUID) (*entities.Sportsman, error) {
	ret := _m.Called(sportsmanID)

	if len(ret) == 0 {
		panic("no return value specified for GetSportsmanByID")
	}

	var r0 *entities.Sportsman
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*entities.Sportsman, error)); ok {
		return rf(sportsmanID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entities.Sportsman); ok {
		r0 = rf(sportsmanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Sportsman)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(sportsmanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResults provides a mock function with given fields: sportsmanID
func (_m *ISportsmanRepository) ListResults(sportsmanID uuid.UUID) ([]*entities.Result, error) {
	ret := _m.Called(sportsmanID)

	if len(ret) == 0 {
		panic("no return value specified for ListResults")
	}

	var r0 []*entities.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]*entities.Result, error)); ok {
		return rf(sportsmanID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*entities.Result); ok {
		r0 = rf(sportsmanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(sportsmanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSportsmen provides a mock function with given fields:
func (_m *ISportsmanRepository) ListSportsmen() ([]*entities.Sportsman, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListSportsmen")
	}

	var r0 []*entities.Sportsman
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Sportsman, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Sportsman); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Sportsman)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: sportsman
func (_m *ISportsmanRepository) Update(sportsman *entities.Sportsman) error {
	ret := _m.Called(sportsman)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Sportsman) error); ok {
		r0 = rf(sportsman)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewISportsmanRepository creates a new instance of ISportsmanRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISportsmanRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISportsmanRepository {
	mock := &ISportsmanRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
