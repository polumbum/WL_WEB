// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	domain "src/internal/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IResultRepository is an autogenerated mock type for the IResultRepository type
type IResultRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: result
func (_m *IResultRepository) Create(result *domain.Result) error {
	ret := _m.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Result) error); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetResultByID provides a mock function with given fields: smID, compID
func (_m *IResultRepository) GetResultByID(smID uuid.UUID, compID uuid.UUID) (*domain.Result, error) {
	ret := _m.Called(smID, compID)

	if len(ret) == 0 {
		panic("no return value specified for GetResultByID")
	}

	var r0 *domain.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (*domain.Result, error)); ok {
		return rf(smID, compID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) *domain.Result); ok {
		r0 = rf(smID, compID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(smID, compID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCoachResults provides a mock function with given fields: coachID
func (_m *IResultRepository) ListCoachResults(coachID uuid.UUID) ([]*domain.Result, error) {
	ret := _m.Called(coachID)

	if len(ret) == 0 {
		panic("no return value specified for ListCoachResults")
	}

	var r0 []*domain.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]*domain.Result, error)); ok {
		return rf(coachID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*domain.Result); ok {
		r0 = rf(coachID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(coachID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCompResults provides a mock function with given fields: compID
func (_m *IResultRepository) ListCompResults(compID uuid.UUID) ([]*domain.Result, error) {
	ret := _m.Called(compID)

	if len(ret) == 0 {
		panic("no return value specified for ListCompResults")
	}

	var r0 []*domain.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]*domain.Result, error)); ok {
		return rf(compID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*domain.Result); ok {
		r0 = rf(compID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(compID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResults provides a mock function with given fields:
func (_m *IResultRepository) ListResults() ([]*domain.Result, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListResults")
	}

	var r0 []*domain.Result
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*domain.Result, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*domain.Result); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Result)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSportsmanResults provides a mock function with given fields: sportsmanID
func (_m *IResultRepository) ListSportsmanResults(sportsmanID uuid.UUID) ([]*domain.Result, error) {
	ret := _m.Called(sportsmanID)

	if len(ret) == 0 {
		panic("no return value specified for ListSportsmanResults")
	}

	var r0 []*domain.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]*domain.Result, error)); ok {
		return rf(sportsmanID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*domain.Result); ok {
		r0 = rf(sportsmanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(sportsmanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: result
func (_m *IResultRepository) Update(result *domain.Result) error {
	ret := _m.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Result) error); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIResultRepository creates a new instance of IResultRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIResultRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IResultRepository {
	mock := &IResultRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
