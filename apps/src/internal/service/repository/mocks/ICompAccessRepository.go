// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	domain "src/internal/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ICompAccessRepository is an autogenerated mock type for the ICompAccessRepository type
type ICompAccessRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ca
func (_m *ICompAccessRepository) Create(ca *domain.CompAccess) error {
	ret := _m.Called(ca)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.CompAccess) error); ok {
		r0 = rf(ca)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccessBySmID provides a mock function with given fields: sportsmanID
func (_m *ICompAccessRepository) GetAccessBySmID(sportsmanID uuid.UUID) (*domain.CompAccess, error) {
	ret := _m.Called(sportsmanID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessBySmID")
	}

	var r0 *domain.CompAccess
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*domain.CompAccess, error)); ok {
		return rf(sportsmanID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.CompAccess); ok {
		r0 = rf(sportsmanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CompAccess)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(sportsmanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ca
func (_m *ICompAccessRepository) Update(ca *domain.CompAccess) (*domain.CompAccess, error) {
	ret := _m.Called(ca)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.CompAccess
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.CompAccess) (*domain.CompAccess, error)); ok {
		return rf(ca)
	}
	if rf, ok := ret.Get(0).(func(*domain.CompAccess) *domain.CompAccess); ok {
		r0 = rf(ca)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CompAccess)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.CompAccess) error); ok {
		r1 = rf(ca)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICompAccessRepository creates a new instance of ICompAccessRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICompAccessRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICompAccessRepository {
	mock := &ICompAccessRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
