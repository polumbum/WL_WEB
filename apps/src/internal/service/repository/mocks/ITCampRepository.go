// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	domain "src/internal/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ITCampRepository is an autogenerated mock type for the ITCampRepository type
type ITCampRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: trainingCamp
func (_m *ITCampRepository) Create(trainingCamp *domain.TCamp) error {
	ret := _m.Called(trainingCamp)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.TCamp) error); ok {
		r0 = rf(trainingCamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *ITCampRepository) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRegistration provides a mock function with given fields: smID, tCampID
func (_m *ITCampRepository) DeleteRegistration(smID uuid.UUID, tCampID uuid.UUID) error {
	ret := _m.Called(smID, tCampID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRegistration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(smID, tCampID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTCampByID provides a mock function with given fields: trainingCampID
func (_m *ITCampRepository) GetTCampByID(trainingCampID uuid.UUID) (*domain.TCamp, error) {
	ret := _m.Called(trainingCampID)

	if len(ret) == 0 {
		panic("no return value specified for GetTCampByID")
	}

	var r0 *domain.TCamp
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*domain.TCamp, error)); ok {
		return rf(trainingCampID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.TCamp); ok {
		r0 = rf(trainingCampID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TCamp)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(trainingCampID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpcoming provides a mock function with given fields: smID
func (_m *ITCampRepository) GetUpcoming(smID uuid.UUID) ([]*domain.TCamp, error) {
	ret := _m.Called(smID)

	if len(ret) == 0 {
		panic("no return value specified for GetUpcoming")
	}

	var r0 []*domain.TCamp
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]*domain.TCamp, error)); ok {
		return rf(smID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*domain.TCamp); ok {
		r0 = rf(smID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.TCamp)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(smID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByOrgID provides a mock function with given fields: id
func (_m *ITCampRepository) ListByOrgID(id uuid.UUID) ([]*domain.TCamp, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ListByOrgID")
	}

	var r0 []*domain.TCamp
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]*domain.TCamp, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*domain.TCamp); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.TCamp)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTCamps provides a mock function with given fields: page, batch, sort, filter
func (_m *ITCampRepository) ListTCamps(page int, batch int, sort string, filter string) ([]*domain.TCamp, error) {
	ret := _m.Called(page, batch, sort, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListTCamps")
	}

	var r0 []*domain.TCamp
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]*domain.TCamp, error)); ok {
		return rf(page, batch, sort, filter)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []*domain.TCamp); ok {
		r0 = rf(page, batch, sort, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.TCamp)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) error); ok {
		r1 = rf(page, batch, sort, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUpcoming provides a mock function with given fields:
func (_m *ITCampRepository) ListUpcoming() ([]*domain.TCamp, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListUpcoming")
	}

	var r0 []*domain.TCamp
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*domain.TCamp, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*domain.TCamp); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.TCamp)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSportsman provides a mock function with given fields: tCampApplication
func (_m *ITCampRepository) RegisterSportsman(tCampApplication *domain.TCampApplication) error {
	ret := _m.Called(tCampApplication)

	if len(ret) == 0 {
		panic("no return value specified for RegisterSportsman")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.TCampApplication) error); ok {
		r0 = rf(tCampApplication)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: trainingCamp
func (_m *ITCampRepository) Update(trainingCamp *domain.TCamp) error {
	ret := _m.Called(trainingCamp)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.TCamp) error); ok {
		r0 = rf(trainingCamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewITCampRepository creates a new instance of ITCampRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITCampRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITCampRepository {
	mock := &ITCampRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
