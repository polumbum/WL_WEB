// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	domain "src/internal/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ICoachRepository is an autogenerated mock type for the ICoachRepository type
type ICoachRepository struct {
	mock.Mock
}

// AddSportsman provides a mock function with given fields: coachID, smID
func (_m *ICoachRepository) AddSportsman(coachID uuid.UUID, smID uuid.UUID) (*domain.SportsmenCoach, error) {
	ret := _m.Called(coachID, smID)

	if len(ret) == 0 {
		panic("no return value specified for AddSportsman")
	}

	var r0 *domain.SportsmenCoach
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (*domain.SportsmenCoach, error)); ok {
		return rf(coachID, smID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) *domain.SportsmenCoach); ok {
		r0 = rf(coachID, smID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SportsmenCoach)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(coachID, smID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: coach
func (_m *ICoachRepository) Create(coach *domain.Coach) error {
	ret := _m.Called(coach)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Coach) error); ok {
		r0 = rf(coach)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: coachID
func (_m *ICoachRepository) Delete(coachID uuid.UUID) error {
	ret := _m.Called(coachID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(coachID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCoachByID provides a mock function with given fields: coachID
func (_m *ICoachRepository) GetCoachByID(coachID uuid.UUID) (*domain.Coach, error) {
	ret := _m.Called(coachID)

	if len(ret) == 0 {
		panic("no return value specified for GetCoachByID")
	}

	var r0 *domain.Coach
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*domain.Coach, error)); ok {
		return rf(coachID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.Coach); ok {
		r0 = rf(coachID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Coach)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(coachID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCoaches provides a mock function with given fields: page, batch, sort, filter
func (_m *ICoachRepository) ListCoaches(page int, batch int, sort string, filter string) ([]*domain.Coach, error) {
	ret := _m.Called(page, batch, sort, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListCoaches")
	}

	var r0 []*domain.Coach
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]*domain.Coach, error)); ok {
		return rf(page, batch, sort, filter)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []*domain.Coach); ok {
		r0 = rf(page, batch, sort, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Coach)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) error); ok {
		r1 = rf(page, batch, sort, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSportsmen provides a mock function with given fields: coachID, page, batch, sort, filter
func (_m *ICoachRepository) ListSportsmen(coachID uuid.UUID, page int, batch int, sort string, filter string) ([]*domain.Sportsman, error) {
	ret := _m.Called(coachID, page, batch, sort, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListSportsmen")
	}

	var r0 []*domain.Sportsman
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, int, int, string, string) ([]*domain.Sportsman, error)); ok {
		return rf(coachID, page, batch, sort, filter)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, int, int, string, string) []*domain.Sportsman); ok {
		r0 = rf(coachID, page, batch, sort, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Sportsman)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, int, int, string, string) error); ok {
		r1 = rf(coachID, page, batch, sort, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSportsman provides a mock function with given fields: coachID, smID
func (_m *ICoachRepository) RemoveSportsman(coachID uuid.UUID, smID uuid.UUID) error {
	ret := _m.Called(coachID, smID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSportsman")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(coachID, smID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: coach
func (_m *ICoachRepository) Update(coach *domain.Coach) error {
	ret := _m.Called(coach)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Coach) error); ok {
		r0 = rf(coach)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICoachRepository creates a new instance of ICoachRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICoachRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICoachRepository {
	mock := &ICoachRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
